#-------------------------------------------------------------------------------
# Name:        app.py
# Purpose:     This file contains the backend code for the notes-summariser app
#              - It will handle uploading the pdfs/ppts, extracting information from it and sending it to gemini
#              - sending back the summaries generated by gemini to user
#              - and then all other features, such as creating text for flashcards, generating text for quizes or creating text for sample test questions
#
# Author:      Sanidhya Arora
#
# Created:     21/07/2025
# Copyright:   (c) sanid 2025
#-------------------------------------------------------------------------------
import os
import json
from flask import Flask, flash, request, redirect, url_for, render_template
from dotenv import load_dotenv
from extract_pdf import extract_text_and_images_from_pdf, extract_image_bytes
from gemini_class import Gemini


class NotesSummariserApp:
    def __init__(self):
        load_dotenv()
        UPLOAD_FOLDER = os.getenv("UPLOAD_FOLDER")

        self.UPLOAD_FOLDER = UPLOAD_FOLDER
        self.ALLOWED_EXTENSIONS = {'pdf', 'ppt'}


##        # SET TO TRUE FOR TESTIMG
##        self.is_pdf = True
##        self.is_ppt = False
##        self.filename = ''

        self.app = Flask(__name__)
        self.app.config['UPLOAD_FOLDER'] = self.UPLOAD_FOLDER
        self.app.secret_key = 'flecafnealkf' #change this as you wish, just must be random

        self.setup_routes()

    def setup_routes(self):
        @self.app.route('/', methods=['GET', 'POST'])
        def upload_file():
            # ONLY FOR TESTING
##            return self.extract_text()
##            return "Extraction done! Check console for output."

            if request.method == 'POST':
                if 'file' not in request.files:
                    flash('No file part')
                    return redirect(request.url)

                file = request.files['file']

                if file.filename == '':
                    flash('No file selected')
                    return redirect(request.url)

                if self.check_file_valid(file.filename):
                    self.filename = file.filename
                    file.save(os.path.join(self.app.config['UPLOAD_FOLDER'], self.filename))

                    # extract the text from the file
                    return self.extract_text()

            return render_template('uploads.html')

    def check_file_valid(self, filename):
        if '.' in filename:
            extension = filename.split('.')[-1]
            if extension in self.ALLOWED_EXTENSIONS:
                self.is_pdf = extension == 'pdf'
                self.is_ppt = extension == 'ppt'
                return True
        return False

    def extract_text(self):
        if self.is_pdf:
            filepath = os.path.join(self.UPLOAD_FOLDER, self.filename)
            text, image_paths = extract_text_and_images_from_pdf(filepath)
            image_bytes = extract_image_bytes(image_paths)
            prompt = self.build_prompt()
            return self.send_to_gemini(prompt, text, image_bytes)
        elif self.is_ppt:
            # implement this later
            pass
        else:
            flash("No file selected")

    def build_prompt(self):
        return (
            "You're an AI assistant helping students study. Given the following input (text and/or image), do the following:\n"
            "1. Provide a summary of the content (max 150 words).\n"
            "2. Extract key points or concepts in bullet form.\n"
            "3. Suggest 3–5 flashcards in Q&A format.\n"
            "4. Suggest 2–3 possible exam-style quiz questions.\n"
            "5. If it's a math-based topic, also generate similar practice questions.\n"
            "6. For every question you provide, include a detailed solution. If it's a math question, show all steps.\n\n"
            "Respond in **JSON** format as shown below:\n"
            "{\n"
            '  "summary": "Your summary here...",\n'
            '  "key_points": ["Point 1", "Point 2", "..."],\n'
            '  "flashcards": [\n'
            '    {"q": "Question 1?", "a": "Answer 1"},\n'
            '    {"q": "Question 2?", "a": "Answer 2"}\n'
            '  ],\n'
            '  "quiz_questions": ["Question 1", "Question 2"],\n'
            '  "solutions": {\n'
            '    "Question 1": "Solution to Question 1 (with all steps if math)",\n'
            '    "Question 2": "Solution to Question 2"\n'
            '  },\n'
            '  "similar_questions": [\n'
            '    "Similar math question 1",\n'
            '    "Similar math question 2"\n'
            '  ]\n'
            "}\n"
            "Return strictly valid JSON only. Do not include Markdown formatting (no **bold**, no code blocks). Do not explain anything outside JSON."
        )

    def send_to_gemini(self, prompt, text, image_bytes):
        instance = Gemini("gemini-2.5-flash")
        response = instance.send_images_and_text(prompt, text, image_bytes)
        self.response_text = self.clean_response_text(response.text)
        return self.parse_output(self.response_text)


    def parse_output(self, response):
        try:
            structured_output = json.loads(response)
            return render_template(
                'results.html',
                filename = self.filename,
                summary=structured_output["summary"],
                key_points=structured_output["key_points"],
                flashcards=structured_output["flashcards"],
                quiz_questions=structured_output["quiz_questions"],
                solutions=structured_output["solutions"],
                similar_questions=structured_output.get("similar_questions", [])
            )
        except json.JSONDecodeError:
            return f"❌ Could not parse Gemini's response as JSON. Raw response:<br><pre>{response}</pre>"

    def clean_response_text(self, text):
        # Remove triple backticks and language tags if present
        if text.startswith("```"):
            # Remove the first line and last line if they are ```
            lines = text.splitlines()
            if lines[0].startswith("```"):
                lines = lines[1:]
            if lines[-1].startswith("```"):
                lines = lines[:-1]
            return "\n".join(lines).strip()
        return text.strip()


    def run(self):
        self.app.run()

        ##FOR TESTING
        #self.app.run(debug=False)




# Main entry point
if __name__ == '__main__':
    app_instance = NotesSummariserApp()
    app_instance.run()




